unit TestShapes;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Shapes;

type
  // Test methods for class TShape

  TestTShape = class(TTestCase)
  strict private
    FShape: TShape;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  end;
  // Test methods for class TRectangle

  TestTRectangle = class(TTestCase)
  strict private
    FRectangle: TRectangle;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestGetArea;
    procedure TestGetPerimeter;
  end;
  // Test methods for class TCircle

  TestTCircle = class(TTestCase)
  strict private
    FCircle: TCircle;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestGetArea;
    procedure TestGetPerimeter;
  end;

implementation

uses
  System.Math;

procedure TestTShape.SetUp;
begin
  //FShape := TShape.Create;
end;

procedure TestTShape.TearDown;
begin
  //FShape.Free;
  //FShape := nil;
end;

procedure TestTRectangle.SetUp;
begin
  FRectangle := TRectangle.Create(20, 10);
end;

procedure TestTRectangle.TearDown;
begin
  FRectangle.Free;
  FRectangle := nil;
end;

procedure TestTRectangle.TestGetArea;
var
  ReturnValue: double;
begin
  ReturnValue := FRectangle.GetArea;
  CheckEquals(200, ReturnValue);
end;

procedure TestTRectangle.TestGetPerimeter;
var
  ReturnValue: double;
begin
  ReturnValue := FRectangle.GetPerimeter;
  CheckEquals(60, ReturnValue);
end;

procedure TestTCircle.SetUp;
begin
  FCircle := TCircle.Create(10);
end;

procedure TestTCircle.TearDown;
begin
  FCircle.Free;
  FCircle := nil;
end;

procedure TestTCircle.TestGetArea;
var
  ReturnValue: double;
begin
  ReturnValue := FCircle.GetArea;
  CheckEquals(314, ReturnValue);
end;

procedure TestTCircle.TestGetPerimeter;
var
  ReturnValue,
  CheckValue: double;
begin
  ReturnValue := FCircle.GetPerimeter;
  CheckValue := SimpleRoundTo(62.8);
  CheckEquals(CheckValue, ReturnValue);
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTShape.Suite);
  RegisterTest(TestTRectangle.Suite);
  RegisterTest(TestTCircle.Suite);
end.

